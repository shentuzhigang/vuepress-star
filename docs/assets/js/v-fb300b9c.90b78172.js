"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6027],{237:(e,t,n)=>{n.r(t),n.d(t,{data:()=>a});const a=JSON.parse('{"key":"v-fb300b9c","path":"/vuepress-next/guide/page.html","title":"Page","lang":"en-US","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"Routing","slug":"routing","link":"#routing","children":[]},{"level":2,"title":"Frontmatter","slug":"frontmatter","link":"#frontmatter","children":[]},{"level":2,"title":"Content","slug":"content","link":"#content","children":[]}],"git":{"createdTime":1635758933000,"updatedTime":1639839959000,"contributors":[{"name":"Starzkg","email":"1600337300@qq.com","commits":1},{"name":"shentuzhigang","email":"shentuzhigang@moresec.cn","commits":1}]},"copyright":"","filePathRelative":"vuepress-next/guide/page.md","content":"# Page\\n\\nVuePress is markdown-centered. Each markdown file inside your project is a standalone page.\\n\\n## Routing\\n\\nBy default, the route path of a page is determined by the relative path of your markdown file.\\n\\nAssuming this is the directory structure of your markdown files:\\n\\n```\\n└─ docs\\n   ├─ guide\\n   │  ├─ getting-started.md\\n   │  └─ README.md\\n   ├─ contributing.md\\n   └─ README.md\\n```\\n\\nTake the `docs` directory as your [sourceDir](../reference/cli.md), e.g. you are running `vuepress dev docs` command. Then the route paths of your markdown files would be:\\n\\n|   Relative Path    |      Route Path      |\\n|--------------------|----------------------|\\n| `/README.md`       | `/`                  |\\n| `/contributing.md` | `/contributing.html` |\\n| `/guide/README.md` | `/guide/`            |\\n| `/guide/page.md`   | `/guide/page.html`   |\\n\\n## Frontmatter\\n\\nA markdown file could contain a [YAML](https://yaml.org/) frontmatter. The frontmatter must be at the top of the Markdown file and must be wrapped with a couple of triple-dashed lines. Here is a basic example:\\n\\n```md\\n---\\nlang: en-US\\ntitle: Title of this page\\ndescription: Description of this page\\n---\\n```\\n\\nYou must have noticed that those fields are similar with the [Site Config](./configuration.md#site-config) in the [Config File](./configuration.md#config-file). You can override `lang`, `title`, `description`, etc., of current page via frontmatter. So you can take frontmatter as page scope config.\\n\\nAlso, VuePress has built-in support for some frontmatter fields, and your theme may have its own special frontmatter, too.\\n\\n::: tip\\nCheck out the [Frontmatter Reference](../reference/frontmatter.md) for a full list of VuePress built-in frontmatter.\\n\\nCheck out the [Default Theme > Frontmatter Reference](../reference/default-theme/frontmatter.md) for the frontmatter of default theme.\\n:::\\n\\n## Content\\n\\nThe main content of your page is written in Markdown. VuePress will firstly transform your Markdown to HTML code, then treat the HTML code as `<template>` of Vue SFC.\\n\\nWith the power of [markdown-it](https://github.com/markdown-it/markdown-it) and Vue template syntax, the basic Markdown can be extended a lot. Next, check out the [Markdown](./markdown.md) guide for all the extensions of Markdown in VuePress.\\n","author":[{"name":"Starzkg","email":"1600337300@qq.com"},{"name":"shentuzhigang","email":"shentuzhigang@moresec.cn"}],"top":false,"length":322,"words":322,"readingTime":1.07}')},24238:(e,t,n)=>{n.r(t),n.d(t,{default:()=>M});var a=n(1863);const o=(0,a._)("h1",{id:"page",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#page","aria-hidden":"true"},"#"),(0,a.Uk)(" Page")],-1),r=(0,a._)("p",null,"VuePress is markdown-centered. Each markdown file inside your project is a standalone page.",-1),s=(0,a._)("h2",{id:"routing",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#routing","aria-hidden":"true"},"#"),(0,a.Uk)(" Routing")],-1),i=(0,a._)("p",null,"By default, the route path of a page is determined by the relative path of your markdown file.",-1),l=(0,a._)("p",null,"Assuming this is the directory structure of your markdown files:",-1),d={class:"code-enhance"},c=(0,a.uE)('<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">└─ docs</span></span>\n<span class="line"><span style="color:#D4D4D4;">   ├─ guide</span></span>\n<span class="line"><span style="color:#D4D4D4;">   │  ├─ getting-started.md</span></span>\n<span class="line"><span style="color:#D4D4D4;">   │  └─ README.md</span></span>\n<span class="line"><span style="color:#D4D4D4;">   ├─ contributing.md</span></span>\n<span class="line"><span style="color:#D4D4D4;">   └─ README.md</span></span>\n<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),u=(0,a._)("code",null,"docs",-1),m=(0,a._)("code",null,"vuepress dev docs",-1),p=(0,a.uE)('<table><thead><tr><th>Relative Path</th><th>Route Path</th></tr></thead><tbody><tr><td><code>/README.md</code></td><td><code>/</code></td></tr><tr><td><code>/contributing.md</code></td><td><code>/contributing.html</code></td></tr><tr><td><code>/guide/README.md</code></td><td><code>/guide/</code></td></tr><tr><td><code>/guide/page.md</code></td><td><code>/guide/page.html</code></td></tr></tbody></table><h2 id="frontmatter" tabindex="-1"><a class="header-anchor" href="#frontmatter" aria-hidden="true">#</a> Frontmatter</h2>',2),h={href:"https://yaml.org/",target:"_blank",rel:"noopener noreferrer"},f={class:"code-enhance"},g=(0,a.uE)('<div class="language-markdown line-numbers-mode" data-ext="md"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">---</span></span>\n<span class="line"><span style="color:#569CD6;">lang</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">en-US</span></span>\n<span class="line"><span style="color:#569CD6;">title</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">Title of this page</span></span>\n<span class="line"><span style="color:#569CD6;">description</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">Description of this page</span></span>\n<span class="line"><span style="color:#D4D4D4;">---</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),k=(0,a._)("code",null,"lang",-1),v=(0,a._)("code",null,"title",-1),y=(0,a._)("code",null,"description",-1),w=(0,a._)("p",null,"Also, VuePress has built-in support for some frontmatter fields, and your theme may have its own special frontmatter, too.",-1),b={class:"custom-container tip"},D=(0,a._)("p",{class:"custom-container-title"},"TIP",-1),_=(0,a._)("h2",{id:"content",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#content","aria-hidden":"true"},"#"),(0,a.Uk)(" Content")],-1),U=(0,a._)("p",null,[(0,a.Uk)("The main content of your page is written in Markdown. VuePress will firstly transform your Markdown to HTML code, then treat the HTML code as "),(0,a._)("code",null,"<template>"),(0,a.Uk)(" of Vue SFC.")],-1),E={href:"https://github.com/markdown-it/markdown-it",target:"_blank",rel:"noopener noreferrer"},x={},M=(0,n(94598).Z)(x,[["render",function(e,t){const n=(0,a.up)("CodeCopyButton"),x=(0,a.up)("RouterLink"),M=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[o,r,s,i,l,(0,a._)("div",d,[c,(0,a.Wm)(n)]),(0,a._)("p",null,[(0,a.Uk)("Take the "),u,(0,a.Uk)(" directory as your "),(0,a.Wm)(x,{to:"/vuepress-next/reference/cli.html"},{default:(0,a.w5)((()=>[(0,a.Uk)("sourceDir")])),_:1}),(0,a.Uk)(", e.g. you are running "),m,(0,a.Uk)(" command. Then the route paths of your markdown files would be:")]),p,(0,a._)("p",null,[(0,a.Uk)("A markdown file could contain a "),(0,a._)("a",h,[(0,a.Uk)("YAML"),(0,a.Wm)(M)]),(0,a.Uk)(" frontmatter. The frontmatter must be at the top of the Markdown file and must be wrapped with a couple of triple-dashed lines. Here is a basic example:")]),(0,a._)("div",f,[g,(0,a.Wm)(n)]),(0,a._)("p",null,[(0,a.Uk)("You must have noticed that those fields are similar with the "),(0,a.Wm)(x,{to:"/vuepress-next/guide/configuration.html#site-config"},{default:(0,a.w5)((()=>[(0,a.Uk)("Site Config")])),_:1}),(0,a.Uk)(" in the "),(0,a.Wm)(x,{to:"/vuepress-next/guide/configuration.html#config-file"},{default:(0,a.w5)((()=>[(0,a.Uk)("Config File")])),_:1}),(0,a.Uk)(". You can override "),k,(0,a.Uk)(", "),v,(0,a.Uk)(", "),y,(0,a.Uk)(", etc., of current page via frontmatter. So you can take frontmatter as page scope config.")]),w,(0,a._)("div",b,[D,(0,a._)("p",null,[(0,a.Uk)("Check out the "),(0,a.Wm)(x,{to:"/vuepress-next/reference/frontmatter.html"},{default:(0,a.w5)((()=>[(0,a.Uk)("Frontmatter Reference")])),_:1}),(0,a.Uk)(" for a full list of VuePress built-in frontmatter.")]),(0,a._)("p",null,[(0,a.Uk)("Check out the "),(0,a.Wm)(x,{to:"/vuepress-next/reference/default-theme/frontmatter.html"},{default:(0,a.w5)((()=>[(0,a.Uk)("Default Theme > Frontmatter Reference")])),_:1}),(0,a.Uk)(" for the frontmatter of default theme.")])]),_,U,(0,a._)("p",null,[(0,a.Uk)("With the power of "),(0,a._)("a",E,[(0,a.Uk)("markdown-it"),(0,a.Wm)(M)]),(0,a.Uk)(" and Vue template syntax, the basic Markdown can be extended a lot. Next, check out the "),(0,a.Wm)(x,{to:"/vuepress-next/guide/markdown.html"},{default:(0,a.w5)((()=>[(0,a.Uk)("Markdown")])),_:1}),(0,a.Uk)(" guide for all the extensions of Markdown in VuePress.")])])}]])}}]);