"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5129],{86926:(e,n,l)=>{l.r(n),l.d(n,{data:()=>t});const t=JSON.parse('{"key":"v-16b050da","path":"/vuepress-next/reference/components.html","title":"Built-in Components","lang":"en-US","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"ClientOnly","slug":"clientonly","link":"#clientonly","children":[]},{"level":2,"title":"Content","slug":"content","link":"#content","children":[]}],"git":{"createdTime":1635758933000,"updatedTime":1639839959000,"contributors":[{"name":"Starzkg","email":"1600337300@qq.com","commits":1},{"name":"shentuzhigang","email":"shentuzhigang@moresec.cn","commits":1}]},"copyright":"","filePathRelative":"vuepress-next/reference/components.md","content":"# Built-in Components\\n\\n<NpmBadge package=\\"@vuepress/client\\" />\\n\\n## ClientOnly\\n\\n- Usage:\\n\\n```md\\n<ClientOnly>\\n  <NonSsrFriendlyComponent />\\n</ClientOnly>\\n```\\n\\n- Details:\\n\\n  This component and its children will only be rendered in client-side. That means, it will not be rendered to HTML during build (SSR).\\n\\n  If a component is trying to access Browser / DOM APIs directly in `setup()`, an error will occur during build because those APIs are unavailable in Node.js environment. In such case, you could do either:\\n\\n  - Modify the component to only access Browser / DOM APIs in `onBeforeMount()` or `onMounted()` hook.\\n  - Wrap the component with `<ClientOnly>`.\\n\\n## Content\\n\\n- Props:\\n  - pageKey\\n    - Type: `string`\\n    - Required: `false`\\n\\n- Usage:\\n\\n```md\\n<Content page-key=\\"v-xxxxxx\\" />\\n```\\n\\n- Details:\\n\\n  This component will render the Markdown content of a page.\\n\\n  The page key is the [name](https://next.router.vuejs.org/api/#name-2) of the page route. If the `pageKey` prop is not provided, it will render the page of current route.\\n\\n  This component is mainly for developing themes. You won\'t need it in most cases.\\n\\n- Also see:\\n  - [Node API > Page Properties > key](./node-api.md#key)\\n","author":[{"name":"Starzkg","email":"1600337300@qq.com"},{"name":"shentuzhigang","email":"shentuzhigang@moresec.cn"}],"top":false,"length":175,"words":175,"readingTime":0.58}')},21524:(e,n,l)=>{l.r(n),l.d(n,{default:()=>f});var t=l(1863);const o=(0,t._)("h1",{id:"built-in-components",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#built-in-components","aria-hidden":"true"},"#"),(0,t.Uk)(" Built-in Components")],-1),i=(0,t._)("h2",{id:"clientonly",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#clientonly","aria-hidden":"true"},"#"),(0,t.Uk)(" ClientOnly")],-1),s=(0,t._)("ul",null,[(0,t._)("li",null,"Usage:")],-1),a={class:"code-enhance"},r=(0,t.uE)('<div class="language-markdown line-numbers-mode" data-ext="md"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">&lt;ClientOnly&gt;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  &lt;NonSsrFriendlyComponent /&gt;</span></span>\n<span class="line"><span style="color:#D4D4D4;">&lt;/ClientOnly&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),d=(0,t.uE)('<ul><li><p>Details:</p><p>This component and its children will only be rendered in client-side. That means, it will not be rendered to HTML during build (SSR).</p><p>If a component is trying to access Browser / DOM APIs directly in <code>setup()</code>, an error will occur during build because those APIs are unavailable in Node.js environment. In such case, you could do either:</p><ul><li>Modify the component to only access Browser / DOM APIs in <code>onBeforeMount()</code> or <code>onMounted()</code> hook.</li><li>Wrap the component with <code>&lt;ClientOnly&gt;</code>.</li></ul></li></ul><h2 id="content" tabindex="-1"><a class="header-anchor" href="#content" aria-hidden="true">#</a> Content</h2><ul><li><p>Props:</p><ul><li>pageKey <ul><li>Type: <code>string</code></li><li>Required: <code>false</code></li></ul></li></ul></li><li><p>Usage:</p></li></ul>',3),c={class:"code-enhance"},p=(0,t.uE)('<div class="language-markdown line-numbers-mode" data-ext="md"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">&lt;Content page-key=&quot;v-xxxxxx&quot; /&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',1),u=(0,t._)("p",null,"Details:",-1),h=(0,t._)("p",null,"This component will render the Markdown content of a page.",-1),m={href:"https://next.router.vuejs.org/api/#name-2",target:"_blank",rel:"noopener noreferrer"},g=(0,t._)("code",null,"pageKey",-1),y=(0,t._)("p",null,"This component is mainly for developing themes. You wonâ€™t need it in most cases.",-1),v=(0,t._)("p",null,"Also see:",-1),k={},f=(0,l(94598).Z)(k,[["render",function(e,n){const l=(0,t.up)("NpmBadge"),k=(0,t.up)("CodeCopyButton"),f=(0,t.up)("ExternalLinkIcon"),b=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.iD)("div",null,[o,(0,t.Wm)(l,{package:"@vuepress/client"}),i,s,(0,t._)("div",a,[r,(0,t.Wm)(k)]),d,(0,t._)("div",c,[p,(0,t.Wm)(k)]),(0,t._)("ul",null,[(0,t._)("li",null,[u,h,(0,t._)("p",null,[(0,t.Uk)("The page key is the "),(0,t._)("a",m,[(0,t.Uk)("name"),(0,t.Wm)(f)]),(0,t.Uk)(" of the page route. If the "),g,(0,t.Uk)(" prop is not provided, it will render the page of current route.")]),y]),(0,t._)("li",null,[v,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(b,{to:"/vuepress-next/reference/node-api.html#key"},{default:(0,t.w5)((()=>[(0,t.Uk)("Node API > Page Properties > key")])),_:1})])])])])])}]])}}]);