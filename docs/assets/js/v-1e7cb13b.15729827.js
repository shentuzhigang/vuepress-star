"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1433],{58165:(s,n,e)=>{e.r(n),e.d(n,{data:()=>l});const l=JSON.parse('{"key":"v-1e7cb13b","path":"/zh/vuepress-next/reference/theme-api.html","title":"主题 API","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"基础配置项","slug":"基础配置项","link":"#基础配置项","children":[{"level":3,"title":"name","slug":"name","link":"#name","children":[]},{"level":3,"title":"multiple","slug":"multiple","link":"#multiple","children":[]}]},{"level":2,"title":"主题特定配置项","slug":"主题特定配置项","link":"#主题特定配置项","children":[{"level":3,"title":"layouts","slug":"layouts","link":"#layouts","children":[]},{"level":3,"title":"plugins","slug":"plugins","link":"#plugins","children":[]},{"level":3,"title":"extends","slug":"extends","link":"#extends","children":[]}]}],"git":{"createdTime":1635758933000,"updatedTime":1635758933000,"contributors":[{"name":"shentuzhigang","email":"shentuzhigang@moresec.cn","commits":1}]},"copyright":"","filePathRelative":"zh/vuepress-next/reference/theme-api.md","content":"# 主题 API\\n\\n<NpmBadge package=\\"@vuepress/core\\" />\\n\\nVuePress 主题同样是一个插件，因此主题 API 可以接收 [插件 API](./plugin-api.md) 的所有选项，但存在以下差别：\\n\\n## 基础配置项\\n\\n### name\\n\\n- 类型： `string`\\n\\n- 详情：\\n\\n  主题的名称。\\n\\n  它应遵从如下命名约定：\\n\\n  - 非 Scoped: `vuepress-theme-foo`\\n  - Scoped: `@org/vuepress-theme-foo`\\n\\n### multiple\\n\\n- 详情：\\n\\n  主题永远不能被多次使用，因此不应设置该配置项。\\n\\n## 主题特定配置项\\n\\n### layouts\\n\\n- 类型： `string | Record<string, string>`\\n\\n- 详情：\\n\\n  指定主题的布局组件。\\n\\n  它可以接收布局目录的绝对路径。该目录下的所有 `.vue,.ts,.js` 文件都会被注册为布局组件。\\n\\n  它还可以接收一个普通对象，其键是布局名称，值是布局文件的绝对路径。\\n\\n  一个主题必须至少有两个布局： `Layout` 和 `404` 。\\n\\n- 示例：\\n\\n布局目录：\\n\\n```bash\\nlayouts\\n├─ Layout.vue\\n├─ 404.vue\\n└─ FooBar.vue\\n```\\n\\n使用布局目录的绝对路径：\\n\\n```js\\nconst { path } = require(\'@vuepress/utils\')\\n\\nmodule.exports = {\\n  layouts: path.resolve(__dirname, \'path/to/layouts\'),\\n}\\n```\\n\\n使用普通对象是等效的：\\n\\n```js\\nconst { path } = require(\'@vuepress/utils\')\\n\\nmodule.exports = {\\n  layouts: {\\n    Layout: path.resolve(__dirname, \'path/to/layouts/Layout.vue\'),\\n    404: path.resolve(__dirname, \'path/to/layouts/404.vue\'),\\n    FooBar: path.resolve(__dirname, \'path/to/layouts/FooBar.vue\'),\\n  },\\n}\\n```\\n\\n### plugins\\n\\n- 类型： `PluginConfig[]`\\n\\n- 详情：\\n\\n  主题中要使用的插件。\\n\\n- 参考：\\n  - [配置 > plugins](./config.md#plugins)\\n\\n### extends\\n\\n- 类型： `string`\\n\\n- 详情：\\n\\n  要继承的主题名称。\\n\\n  父主题的所有主题 API 都会被继承，但是子主题不会覆盖父主题。\\n\\n  当在子主题和父主题中注册了具有相同名称的布局时，则子主题的布局将具有更高的优先级。\\n\\n  当同一个插件在子主题和父主题中都被使用时，如果该插件不支持被多次使用，那么只有在子主题中使用的插件会生效。\\n\\n  支持多级继承。\\n\\n- 示例：\\n\\n```js\\nconst { path } = require(\'@vuepress/utils\')\\n\\nmodule.exports = {\\n  // 继承默认主题\\n  extends: \'@vuepress/theme-default\',\\n\\n  // 覆盖 `404` 布局\\n  layouts: {\\n    404: path.resolve(__dirname, \'path/to/404.vue\'),\\n  },\\n}\\n```\\n","author":[{"name":"shentuzhigang","email":"shentuzhigang@moresec.cn"}],"top":false,"length":480,"words":480,"readingTime":1.6}')},54587:(s,n,e)=>{e.r(n),e.d(n,{default:()=>_});var l=e(1863);const a=(0,l._)("h1",{id:"主题-api",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#主题-api","aria-hidden":"true"},"#"),(0,l.Uk)(" 主题 API")],-1),p=(0,l.uE)('<h2 id="基础配置项" tabindex="-1"><a class="header-anchor" href="#基础配置项" aria-hidden="true">#</a> 基础配置项</h2><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>主题的名称。</p><p>它应遵从如下命名约定：</p><ul><li>非 Scoped: <code>vuepress-theme-foo</code></li><li>Scoped: <code>@org/vuepress-theme-foo</code></li></ul></li></ul><h3 id="multiple" tabindex="-1"><a class="header-anchor" href="#multiple" aria-hidden="true">#</a> multiple</h3><ul><li><p>详情：</p><p>主题永远不能被多次使用，因此不应设置该配置项。</p></li></ul><h2 id="主题特定配置项" tabindex="-1"><a class="header-anchor" href="#主题特定配置项" aria-hidden="true">#</a> 主题特定配置项</h2><h3 id="layouts" tabindex="-1"><a class="header-anchor" href="#layouts" aria-hidden="true">#</a> layouts</h3><ul><li><p>类型： <code>string | Record&lt;string, string&gt;</code></p></li><li><p>详情：</p><p>指定主题的布局组件。</p><p>它可以接收布局目录的绝对路径。该目录下的所有 <code>.vue,.ts,.js</code> 文件都会被注册为布局组件。</p><p>它还可以接收一个普通对象，其键是布局名称，值是布局文件的绝对路径。</p><p>一个主题必须至少有两个布局： <code>Layout</code> 和 <code>404</code> 。</p></li><li><p>示例：</p></li></ul><p>布局目录：</p>',9),o={class:"code-enhance"},r=(0,l.uE)('<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">layouts</span></span>\n<span class="line"><span style="color:#D4D4D4;">├─ Layout.vue</span></span>\n<span class="line"><span style="color:#D4D4D4;">├─ 404.vue</span></span>\n<span class="line"><span style="color:#D4D4D4;">└─ FooBar.vue</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),t=(0,l._)("p",null,"使用布局目录的绝对路径：",-1),i={class:"code-enhance"},c=(0,l.uE)('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">path</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;@vuepress/utils&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">layouts:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;path/to/layouts&#39;</span><span style="color:#D4D4D4;">),</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),D=(0,l._)("p",null,"使用普通对象是等效的：",-1),d={class:"code-enhance"},u=(0,l.uE)('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">path</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;@vuepress/utils&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">layouts:</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">Layout:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;path/to/layouts/Layout.vue&#39;</span><span style="color:#D4D4D4;">),</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#B5CEA8;">404</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;path/to/layouts/404.vue&#39;</span><span style="color:#D4D4D4;">),</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">FooBar:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;path/to/layouts/FooBar.vue&#39;</span><span style="color:#D4D4D4;">),</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),y=(0,l._)("h3",{id:"plugins",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#plugins","aria-hidden":"true"},"#"),(0,l.Uk)(" plugins")],-1),v=(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("类型： "),(0,l._)("code",null,"PluginConfig[]")])],-1),h=(0,l._)("li",null,[(0,l._)("p",null,"详情："),(0,l._)("p",null,"主题中要使用的插件。")],-1),m=(0,l._)("p",null,"参考：",-1),C=(0,l.uE)('<h3 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> extends</h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>要继承的主题名称。</p><p>父主题的所有主题 API 都会被继承，但是子主题不会覆盖父主题。</p><p>当在子主题和父主题中注册了具有相同名称的布局时，则子主题的布局将具有更高的优先级。</p><p>当同一个插件在子主题和父主题中都被使用时，如果该插件不支持被多次使用，那么只有在子主题中使用的插件会生效。</p><p>支持多级继承。</p></li><li><p>示例：</p></li></ul>',2),g={class:"code-enhance"},b=(0,l.uE)('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">path</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;@vuepress/utils&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 继承默认主题</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">extends:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;@vuepress/theme-default&#39;</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 覆盖 `404` 布局</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">layouts:</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#B5CEA8;">404</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;path/to/404.vue&#39;</span><span style="color:#D4D4D4;">),</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),E={},_=(0,e(94598).Z)(E,[["render",function(s,n){const e=(0,l.up)("NpmBadge"),E=(0,l.up)("RouterLink"),_=(0,l.up)("CodeCopyButton");return(0,l.wg)(),(0,l.iD)("div",null,[a,(0,l.Wm)(e,{package:"@vuepress/core"}),(0,l._)("p",null,[(0,l.Uk)("VuePress 主题同样是一个插件，因此主题 API 可以接收 "),(0,l.Wm)(E,{to:"/zh/vuepress-next/reference/plugin-api.html"},{default:(0,l.w5)((()=>[(0,l.Uk)("插件 API")])),_:1}),(0,l.Uk)(" 的所有选项，但存在以下差别：")]),p,(0,l._)("div",o,[r,(0,l.Wm)(_)]),t,(0,l._)("div",i,[c,(0,l.Wm)(_)]),D,(0,l._)("div",d,[u,(0,l.Wm)(_)]),y,(0,l._)("ul",null,[v,h,(0,l._)("li",null,[m,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Wm)(E,{to:"/zh/vuepress-next/reference/config.html#plugins"},{default:(0,l.w5)((()=>[(0,l.Uk)("配置 > plugins")])),_:1})])])])]),C,(0,l._)("div",g,[b,(0,l.Wm)(_)])])}]])}}]);