const n=JSON.parse('{"key":"v-1d5f7998","path":"/zh/guide/markdown/advanced/vuepress.html","title":"Vuepress 语法扩展","lang":"zh-CN","frontmatter":{"title":"Vuepress 语法扩展","icon":"more","head":[["meta",{"name":"og:url","content":"/zh/guide/markdown/advanced/vuepress.html"}],["meta",{"name":"og:site_name","content":"vuepress-theme-star"}],["meta",{"name":"og:title","content":"Vuepress 语法扩展"}],["meta",{"name":"og:description","content":""}],["meta",{"name":"og:type","content":"article"}],["meta",{"name":"og:image","content":""}],["meta",{"name":"og:updated_time","content":"2022-10-22T08:40:46.000Z"}],["meta",{"name":"og:locale","content":"zh-CN"}],["meta",{"name":"og:locale:alternate","content":"en-US"}],["meta",{"name":"og:locale:alternate","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"vuepress-theme-star"}],["meta",{"name":"article:author","content":""}],["meta",{"name":"article:published_time","content":""}],["meta",{"name":"article:modified_time","content":"2022-10-22T08:40:46.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"内置","slug":"内置","link":"#内置","children":[]},{"level":2,"title":"标题锚点","slug":"标题锚点","link":"#标题锚点","children":[]},{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]},{"level":2,"title":"Emoji 🎉","slug":"emoji","link":"#emoji","children":[]},{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"代码块","slug":"代码块","link":"#代码块","children":[{"level":3,"title":"行高亮","slug":"行高亮","link":"#行高亮","children":[]},{"level":3,"title":"行号","slug":"行号","link":"#行号","children":[]},{"level":3,"title":"添加 v-pre","slug":"添加-v-pre","link":"#添加-v-pre","children":[]}]},{"level":2,"title":"导入代码块","slug":"导入代码块","link":"#导入代码块","children":[]}],"git":{"createdTime":1664110816000,"updatedTime":1666428046000,"contributors":[{"name":"shentuzhigang","email":"shentuzhigang01@weidian.com","commits":3}]},"copyright":"Copyright © 2021-present Starzkg","filePathRelative":"zh/guide/markdown/advanced/vuepress.md","content":"---\\ntitle: Vuepress 语法扩展\\nicon: more\\n---\\n# Vuepress 语法扩展\\n\\nVuePress 会使用 [markdown-it](https://github.com/markdown-it/markdown-it) 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 [语法扩展](https://github.com/markdown-it/markdown-it#syntax-extensions) 。\\n\\n本章节将会介绍 VuePress 内置支持的 Markdown 语法扩展。\\n\\n你也可以通过 [markdown](https://vuepress.github.io/zh/reference/config.md#markdown) 和 [extendsMarkdown](https://vuepress.github.io/zh/reference/plugin-api.md#extendsmarkdown) 来配置这些内置扩展、加载更多 markdown-it 插件、实现你自己的扩展等。\\n\\n## 内置\\n\\n由 markdown-it 内置支持：\\n\\n- [表格](https://help.github.com/articles/organizing-information-with-tables/) (GFM)\\n- [删除线](https://help.github.com/articles/basic-writing-and-formatting-syntax/#styling-text) (GFM)\\n\\n## 标题锚点\\n\\n你可能已经注意到，当你把鼠标放在各个章节的标题上时，会显示出一个 `#` 锚点。点击这个 `#` 锚点，可以直接跳转到对应章节。\\n\\n::: tip\\n标题锚点扩展由 [markdown-it-anchor](https://github.com/valeriangalliat/markdown-it-anchor) 支持。\\n\\n配置参考： [markdown.anchor](https://vuepress.github.io/zh/reference/config.md#markdown-anchor)\\n:::\\n\\n## 链接\\n\\n在你使用 Markdown 的 [链接语法](https://spec.commonmark.org/0.29/#link-reference-definitions) 时， VuePress 会为你进行一些转换。\\n\\n以我们文档的源文件为例：\\n\\n```bash\\n└─ docs\\n   └─ zh\\n      ├─ guide\\n      │  ├─ getting-started.md\\n      │  ├─ markdown.md    # <- 我们在这里\\n      │  └─ README.md\\n      ├─ reference\\n      │  └─ config.md\\n      └─ README.md\\n```\\n\\n**原始 Markdown**\\n\\n```md\\n<!-- 相对路径 -->\\n[首页](../README.md)  \\n[配置参考](../reference/config.md)  \\n[快速上手](./getting-started.md)  \\n<!-- 绝对路径 -->\\n[指南](/zh/guide/README.md)  \\n[配置参考 > markdown.links](/zh/reference/config.md#links)  \\n<!-- URL -->\\n[GitHub](https://github.com) \\n```\\n\\n**转换为**\\n\\n```vue\\n<template>\\n  <RouterLink to=\\"/zh/\\">首页</RouterLink>\\n  <RouterLink to=\\"/zh/reference/config.html\\">配置参考</RouterLink>\\n  <RouterLink to=\\"/zh/guide/getting-started.html\\">快速上手</RouterLink>\\n  <RouterLink to=\\"/zh/guide/\\">指南</RouterLink>\\n  <RouterLink to=\\"/zh/reference/config.html#links\\">配置参考 &gt; markdown.links</RouterLink>\\n  <a href=\\"https://github.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GitHub</a>\\n</template>\\n```\\n\\n**渲染为**\\n\\n[首页](../README.md)  \\n[配置参考](../reference/config.md)  \\n[快速上手](./getting-started.md)  \\n[指南](/zh/guide/README.md)  \\n[配置参考 > markdown.links](/zh/reference/config.md#links)  \\n[GitHub](https://github.com)\\n\\n**解释**\\n\\n- 内部链接会被转换为 `<RouterLink>` 以便进行 SPA 导航。\\n- 指向 `.md` 文件的内部链接会被转换为目标页面的 [路由路径](./page.md#路由)，并且支持绝对路径和相对路径。\\n- 外部链接会被添加 `target=\\"_blank\\" rel=\\"noopener noreferrer\\"` 属性。\\n\\n**建议**\\n\\n对于指向内部 Markdown 文件的链接，尽可能使用相对路径而不是绝对路径。\\n\\n- 相对路径是指向目标文件的有效链接，在你的编辑器或者代码仓库中浏览源文件时也可以正确跳转。\\n- 相对路径在不同 locales 下都是一致的，这样在翻译你的内容时就不需要修改 locale 路径了。\\n\\n::: tip\\n链接扩展是由我们的内置插件支持的。\\n\\n配置参考： [markdown.links](https://vuepress.github.io/zh/reference/config.md#markdown-links)\\n:::\\n\\n## Emoji :tada:\\n\\n你可以在你的 Markdown 内容中输入 `:EMOJICODE:` 来添加 Emoji 表情。\\n\\n前往 [emoji-cheat-sheet](https://github.com/ikatyang/emoji-cheat-sheet) 来查看所有可用的 Emoji 表情和对应代码。\\n\\n**输入**\\n\\n```md\\nVuePress 2 已经发布 :tada: ！\\n```\\n\\n**输出**\\n\\nVuePress 2 已经发布 :tada: ！\\n\\n::: tip\\nEmoji 扩展由 [markdown-it-emoji](https://github.com/markdown-it/markdown-it-emoji) 支持。\\n\\n配置参考： [markdown.emoji](https://vuepress.github.io/zh/reference/config.md#markdown-emoji)\\n:::\\n\\n## 目录\\n\\n如果你想要把当前页面的目录添加到 Markdown 内容中，你可以使用 `[[toc]]` 语法。\\n\\n**输入**\\n\\n```md\\n[[toc]]\\n```\\n\\n**输出**\\n\\n[[toc]]\\n\\n目录中的标题将会链接到对应的 [标题锚点](#标题锚点)，因此如果你禁用了标题锚点，可能会影响目录的功能。\\n\\n::: tip\\n目录扩展由 [@mdit-vue/plugin-toc](https://github.com/mdit-vue/mdit-vue/tree/main/packages/plugin-toc) 支持。\\n\\n\\n配置参考： [markdown.toc](https://vuepress.github.io/zh/reference/config.md#markdown-toc)\\n:::\\n\\n## 代码块\\n\\n下列代码块扩展是在 Node 端进行 Markdown 解析的时候实现的。这意味着代码块并不会在客户端被处理。\\n\\n### 行高亮\\n\\n你可以在代码块添加行数范围标记，来为对应代码行进行高亮：\\n\\n**输入**\\n\\n````md\\n```ts{1,6-8}\\nimport { defaultTheme, defineUserConfig } from \'vuepress\'\\n\\nexport default defineUserConfig({\\n  title: \'你好， VuePress\',\\n\\n  theme: defaultTheme({\\n    logo: \'https://vuejs.org/images/logo.png\',\\n  }),\\n})\\n```\\n````\\n\\n**输出**\\n\\n```ts{1,6-8}\\nimport { defaultTheme, defineUserConfig } from \'vuepress\'\\n\\nexport default defineUserConfig({\\n  title: \'你好， VuePress\',\\n\\n  theme: defaultTheme({\\n    logo: \'https://vuejs.org/images/logo.png\',\\n  }),\\n})\\n```\\n\\n行数范围标记的例子：\\n\\n- 行数范围： `{5-8}`\\n- 多个单行： `{4,7,9}`\\n- 组合： `{4,7-13,16,23-27,40}`\\n\\n::: tip\\n行高亮扩展是由我们的内置插件支持的，该扩展 Fork 并修改自  [markdown-it-highlight-lines](https://github.com/egoist/markdown-it-highlight-lines)。\\n\\n配置参考： [markdown.code.highlightLines](https://vuepress.github.io/zh/reference/config.md#markdown-code-highlightlines)\\n:::\\n\\n### 行号\\n\\n你肯定已经注意到在代码块的最左侧会展示行号。这个功能是默认启用的，你可以通过配置来禁用它。\\n\\n你可以在代码块添加 `:line-numbers` / `:no-line-numbers` 标记来覆盖配置项中的设置。\\n\\n**输入**\\n\\n````md\\n```ts\\n// 行号默认是启用的\\nconst line2 = \'This is line 2\'\\nconst line3 = \'This is line 3\'\\n```\\n\\n```ts:no-line-numbers\\n// 行号被禁用\\nconst line2 = \'This is line 2\'\\nconst line3 = \'This is line 3\'\\n```\\n````\\n\\n**输出**\\n\\n```ts\\n// 行号默认是启用的\\nconst line2 = \'This is line 2\'\\nconst line3 = \'This is line 3\'\\n```\\n\\n```ts:no-line-numbers\\n// 行号被禁用\\nconst line2 = \'This is line 2\'\\nconst line3 = \'This is line 3\'\\n```\\n\\n::: tip\\n行号扩展是由我们的内置插件支持的。\\n\\n配置参考： [markdown.code.lineNumbers](https://vuepress.github.io/zh/reference/config.md#markdown-code-linenumbers)\\n:::\\n\\n### 添加 v-pre\\n\\n由于 [模板语法可以在 Markdown 中使用](#模板语法)，它也同样可以在代码块中生效。\\n\\n为了避免你的代码块被 Vue 编译， VuePress 默认会在你的代码块添加 [v-pre](https://v3.vuejs.org/api/directives.html#v-pre) 指令。这一默认行为可以在配置中关闭。\\n\\n\\n你可以在代码块添加 `:v-pre` / `:no-v-pre` 标记来覆盖配置项中的设置。\\n\\n::: warning\\n模板语法的字符有可能会被语法高亮器解析，比如 \\"Mustache\\" 语法（即双花括号）。因此，就像下面的例子一样，在某些语言中 `:no-v-pre` 可能并不能生效。\\n\\n如果你无论如何都想在这种语言中使用 Vue 语法，你可以尝试禁用默认的语法高亮，然后在客户端实现你的自定义代码高亮。\\n:::\\n\\n**输入**\\n\\n````md\\n```md\\n<!-- 默认情况下，这里会被保持原样 -->\\n1 + 2 + 3 = {{ 1 + 2 + 3 }}\\n```\\n\\n```md:no-v-pre\\n<!-- 这里会被 Vue 编译 -->\\n1 + 2 + 3 = {{ 1 + 2 + 3 }}\\n```\\n\\n```js:no-v-pre\\n// 由于 JS 代码高亮，这里不会被正确编译\\nconst onePlusTwoPlusThree = {{ 1 + 2 + 3 }}\\n```\\n````\\n\\n**输出**\\n\\n```md\\n<!-- 默认情况下，这里会被保持原样 -->\\n1 + 2 + 3 = {{ 1 + 2 + 3 }}\\n```\\n\\n```md:no-v-pre\\n<!-- 这里会被 Vue 编译 -->\\n1 + 2 + 3 = {{ 1 + 2 + 3 }}\\n```\\n\\n<!--\\n在 JS 代码块上使用 :no-v-pre 的话，会在使用 shiki 时遇到一些潜在的问题，所以这里\\n我们实际上没有使用 :no-v-pre ，只是作为一个错误用法的示例。\\n-->\\n\\n```js\\n// 由于 JS 代码高亮，这里不会被正确编译\\nconst onePlusTwoPlusThree = {{ 1 + 2 + 3 }}\\n```\\n\\n::: tip\\nv-pre 扩展是由我们的内置插件支持的。\\n\\n配置参考： [markdown.code.vPre.block](https://vuepress.github.io/zh/reference/config.md#markdown-code-vpre-block)\\n:::\\n\\n## 导入代码块\\n\\n你可以使用下面的语法，从文件中导入代码块：\\n\\n```md\\n<!-- 最简单的语法 -->\\n@[code](../foo.js)\\n```\\n\\n如果你只想导入这个文件的一部分：\\n\\n```md\\n<!-- 仅导入第 1 行至第 10 行 -->\\n@[code{1-10}](../foo.js)\\n```\\n\\n代码语言会根据文件扩展名进行推断，但我们建议你显式指定：\\n\\n```md\\n<!-- 指定代码语言 -->\\n@[code js](../foo.js)\\n```\\n\\n实际上，`[]` 内的第二部分会被作为代码块标记来处理，因此在上面 [代码块](#代码块) 章节中提到的语法在这里都可以支持：\\n\\n```md\\n<!-- 行高亮 -->\\n@[code js{2,4-5}](../foo.js)\\n```\\n\\n下面是一个复杂的例子：\\n\\n- 导入 `\'../foo.js\'` 文件的第 3 行至第 10 行\\n- 指定语言为 `\'js\'`\\n- 对导入代码的第 3 行进行高亮，即 `\'../foo.js\'` 文件的第 5 行\\n- 禁用行号\\n\\n```md\\n@[code{3-10} js{3}:no-line-numbers](../foo.js)\\n```\\n\\n需要注意的是，路径别名在导入代码语法中不会生效。你可以通过下面的配置来自行处理路径别名：\\n\\n```ts\\nimport { getDirname, path } from \'@vuepress/utils\'\\n\\nconst __dirname = getDirname(i​mport.meta.url)\\n\\nexport default {\\n  markdown: {\\n    importCode: {\\n      handleImportPath: (str) =>\\n        str.replace(/^@src/, path.resolve(__dirname, \'path/to/src\')),\\n    },\\n  },\\n}\\n```\\n\\n```md\\n<!-- 会被解析至 \'path/to/src/foo.js\' -->\\n@[code](@src/foo.js)\\n```\\n\\n::: tip\\n导入代码扩展是由我们的内置插件支持的。\\n\\n配置参考： [markdown.importCode](../reference/config.md#markdown-importcode)\\n:::\\n","icon":"more","author":[{"name":"shentuzhigang","email":"shentuzhigang01@weidian.com"}],"top":false,"length":2027,"words":2027,"readingTime":6.76}');export{n as data};
